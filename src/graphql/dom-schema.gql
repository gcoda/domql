scalar HTMLElement
scalar JSON
scalar AttributesMap

directive @trim on FIELD | FIELD_DEFINITION
directive @number(toFixed: Int) on FIELD | FIELD_DEFINITION
directive @replace(
  search: String
  replacement: String = ""
  flags: String = ""
) on FIELD | FIELD_DEFINITION

directive @validate(
  schema: JsonProperty
  throw: Boolean
) on FIELD | FIELD_DEFINITION

directive @output(
  name: String!
  data: JSON
  includeResult: Boolean
  forEach: Boolean
) on FIELD

enum JsonType {
  object
  array
  string
  integer
  boolean
}
input JsonProperty {
  type: JsonType
  name: String
  additionalProperties: Boolean
  default: JSON
  required: [String!]
  properties: [JsonProperty]
  enum: [String!]
  "type: string"
  pattern: String
  "type: string"
  minLength: Int
  "type: string"
  maxLength: Int

  "type: array"
  minItems: Int
  "type: array"
  maxItems: Int
  "type: array"
  uniqueItems: Boolean
  "type: array"
  items: JsonProperty

  "type: integer"
  minimum: Float
  "type: integer"
  maximum: Float

  # "type": "string",
  # "oneOf": [
  #     { "format": "host-name" },
  #     { "format": "ipv4" },
  #     { "format": "ipv6" }
  # ]
}

schema {
  query: Query
}
type Output {
  name: String
  data: JSON
  result: JSON
}
type Query {
  echo(
    json: JSON
    array: [JSON]
    parse: String
    string: String
    number: Float
    boolean: Boolean
  ): JSON

  document(
    location: String
    waitForSelector: String
    bailOnComplete: Boolean
  ): Document
}

enum FetchMethod {
  GET
  POST
  HEAD
}
input FetchInit {
  method: FetchMethod
}
type JsonRecords {
  records: JSON
  get(name: String!): JSON
}
type FetchResponse {
  status: Int
  statusText: String
  url: String
  text: String
  json: JSON
  document: Document
  headers: JsonRecords
}
type Document {
  fetch(url: String!, init: FetchInit): FetchResponse
  echo(
    json: JSON
    array: [JSON]
    parse: String
    string: String
    number: Float
    boolean: Boolean
  ): JSON
  title: String
  referrer: String
  location: String
  select(
    "document.querySelector"
    selector: String
    "hasText"
    hasText: String
  ): Node
  selectAll(
    "document.querySelector"
    selector: String
    "hasText"
    hasText: String
  ): [Node!]
}
enum Context {
  NODE
  PARENT
  DOCUMENT
}
input SelectorOptions {
  tagName: Boolean
  idName: Boolean
  fromRoot: Boolean
  seedMinLength: Int
  optimizedMinLength: Int
}
type Node {
  selector(options: SelectorOptions): String
  selectors(selector: String, options: SelectorOptions): [String]
  selectAll(
    "document.querySelector"
    selector: String
    "hasText"
    hasText: String
  ): [Node!]
  select(
    "document.querySelector"
    selector: String
    "hasText"
    hasText: String
  ): Node
  fetch(url: String!, init: FetchInit): FetchResponse
  echo(
    json: JSON
    array: [JSON]
    parse: String
    string: String
    number: Float
    boolean: Boolean
  ): JSON
  node: HTMLElement
  text: String
  innerText: String
  html: String
  classList: [String]
  attr(name: String!): String
  parent: Node
  attributes: AttributesMap
  next: Node
  childNodes: [Node!]
  click(selector: String, waitForSelector: String, wait: Float): Node
  root: Node
  scrollIntoView: Document
}
# waitContext: Context = PARENT
# resultContext: Context = DOCUMENT
